#!/usr/bin/env ruby

require 'thor'
require 'active_support/all'

class Main < Thor
  desc 'show_exited', 'Show exited containers'
  def show_exited
    system('docker ps --filter="status=exited"')
  end

  desc 'rm', 'Remove containers'
  option :exit_before, desc: 'Filter container exited before a given time'
  option :created, type: :boolean, desc: 'Filter container created'
  def rm
    if options[:created]
      output = `docker ps --filter="status=created" --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"`
      lines = output.lines
    elsif options[:exit_before]
      if /^(\d+)(.+)$/ =~ options[:exit_before]
        method =
          case $2.strip.downcase
          when 'd', 'day', 'days'
            'days'
          when 'w', 'week', 'weeks'
            'weeks'
          when 'm', 'month', 'months'
            'months'
          when 'y', 'year', 'years'
            'years'
          else
            fatal "Cannot parse #{options[:exit_before]}"
          end
        now = Time.now
        exit_before = now - $1.to_i.send(method)
        output = `docker ps --filter="status=exited" --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"`
        lines = output.each_line.select.with_index do |line, i|
          i.zero? || ((/Exited \(\d+\) (\d+) (days?|weeks?|months?|years?) ago$/ =~ line) && exit_before >= (now - $1.to_i.send($2)))
        end
      else
        fatal 'You must specify a correct format for exit-before'
      end
    end

    if lines.count <= 1
      puts 'No containers found'
    else
      puts lines
      confirm_to_remove('Are you sure you want to remove above containers?(Y/N)', lines, 'docker rm')
    end
  end

  desc 'rmi', 'Remove images'
  option :before, desc: 'Filter images created before given id or references'
  option :since, desc: 'Filter images created since given id or reference'
  option :dangling, type: :boolean, default: false, desc: 'Filter dangling images'
  def rmi
    filters = []
    filters << "before=#{options[:before]}" if options[:before]
    filters << "since=#{options[:since]}" if options[:since]
    filters << "dangling=true" if options[:dangling]
    fatal 'You must specify a filter' if filters.empty?

    filters = filters.map { |filter| "--filter \"#{filter}\"" }.join(' ')
    output = `docker images #{filters} --format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}\t{{.CreatedSince}}"`
    lines = output.each_line.to_a
    if lines.count <= 1
      puts 'No images found'
    else
      puts lines
      confirm_to_remove('Are you sure you want to remove above images?(Y/N)', lines, 'docker rmi -f')
    end
  end

  private

  def fatal(msg)
    STDERR.puts "Error: #{msg}"
    exit 1
  end

  def confirm_to_remove(msg, lines, cmd)
    puts
    print msg
    if STDIN.readline.chop.downcase == 'y'
      ids = []
      lines.each.with_index do |line, i|
        next if i.zero?
        ids << line.split(' ')[0]
      end
      `#{cmd} #{ids.join(' ')}` unless ids.empty?
    end
  end
end

Main.start(ARGV)
