#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF 1>&2
Usage: $0 [--no-editor] [-q <query>] [<template>]

Generate files from a template. When no template is given, it will use fzf to
let user select one.

Options:
  -q <query> Fzf query string
  --no-editor Do not open generated file with an editor
EOF
  exit 1
}

gen() {
  local dst_dir="$(pwd)"
  local ask_filename=0
  local ask_filename_default
  local edit=0
  local executable=0
  local extname
  local dst
  while [ "$#" -gt 0 ]; do
    case "$1" in
      # Target directory.
      -d | --target-dir)
        shift
        dst_dir="$1"
        shift
        ;;
      # Ask user to input the file name.
      -p | --ask-filename)
        shift
        ask_filename=1
        ;;
      # The default filename when asking.
      --ask-filename-default)
        shift
        ask_filename_default="$1"
        shift
        ;;
      # Open destination file with EDITOR.
      # Only available when template is not a directory.
      -e | --editor)
        shift
        if [ ! "$no_editor" = "1" ]; then
          edit=1
        fi
        ;;
      # Change to executable.
      # Only available when template is not a directory.
      -x | --exec)
        shift
        executable=1
        ;;
      # Only available when template is not a directory.
      --ext)
        shift
        extname="$1"
        shift
        if [ ! "${extname:0:1}" = "." ]; then
          extname=".$extname"
        fi
        ;;
      # Absolute path to the generated file.
      -f)
        dst="$2"
        shift 2
        ;;
      # Any unknown argument will break the while loop. So the argument order matters.
      *)
        break
        ;;
    esac
  done

  local root="$HOME/.templates"
  if [ ! -e "$root" ]; then
    git clone https://github.com/uzxmx/templates "$root" --depth 1
  fi
  local src_root="$root/src"
  local short_name="$1"
  local name="$src_root/$short_name"
  local filename
  if [ -d "$name" ]; then
    if [ -z "$dst" ]; then
      if [ "$ask_filename" = "1" ]; then
        source "$dotfiles_dir/scripts/lib/prompt.sh"
        while true; do
          ask_for_input filename "Directory name: " "$ask_filename_default"
          if [ -n "$filename" ]; then
            if [ -e "$dst_dir/$filename" ]; then
              echo "File '$dst_dir/$filename' already exists"
              unset filename
            else
              break
            fi
          fi
        done
      else
        filename="$1"
      fi
      dst="$dst_dir/$filename"
    fi
    local cmds=(cp -R "$name" "$dst")
    local src_parent_dir="$name/__parent__"
    if [ -e "$src_parent_dir" ]; then
      cmds+=("&&" "rm" -rf "$dst/__parent__")
      local dst_parent_dir="$(dirname "$dst")"
      local f
      while read f; do
        if [ -e "$dst_parent_dir/$f" ]; then
          echo "$dst_parent_dir/$f already exists. Abort"
          exit 1
        fi
        if [ -d "$src_parent_dir/$f" ]; then
          cmds+=("&&" "cp" -R "$src_parent_dir/$f" "$dst_parent_dir/$f")
        else
          cmds+=("&&" "cp" "$src_parent_dir/$f" "$dst_parent_dir/$f")
        fi
      done < <(ls -A "$src_parent_dir")
    fi
    eval "${cmds[@]}"
    echo "Generated successfully."
  else
    # We don't use regex because of the differences between linux based systems and BSD systems.
    local file="$(find "$src_root" -name "$short_name.tpl" -or -name "$short_name.tpl.sh" -or -name "$short_name.tpl.erb" | head -1)"
    if [ -z "$file" ]; then
      echo No template file found. To resolve this issue, you can try to update the templates repository.
      exit 1
    fi

    if [ -z "$dst" ]; then
      if [ "$ask_filename" = "1" ]; then
        source "$dotfiles_dir/scripts/lib/prompt.sh"
        while true; do
          ask_for_input filename "File name: $dst_dir/"
          if [ -n "$extname" ] && [[ ! "$filename" =~ "$extname"$ ]]; then
            filename="$filename$extname"
          fi
          if [ -n "$filename" ]; then
            if [ -e "$dst_dir/$filename" ]; then
              echo "File '$dst_dir/$filename' already exists"
              unset filename
            else
              break
            fi
          fi
        done
      else
        filename="$1"
      fi
      dst="$dst_dir/$filename"
    else
      filename="$(basename "$dst")"
    fi

    if [ -e "$dst" ]; then
      local reply
      echo -n "File $dst already exists, overwrite it or generate a temporary file? (y/N/g)"
      read reply
      if [ "$reply" = "g" ]; then
        dst="$(mktemp)"
        filename="$(basename "$dst")"
      elif [ ! "$reply" = "y" ]; then
        echo Cancelled
        exit
      fi
    fi

    if [ "$file" = "$name.tpl" ]; then
      cp "$file" "$dst"
    else
      tmpfile="$(mktemp)"
      handle_exit() {
        if [ -e "$tmpfile" ]; then
          rm "$tmpfile"
        fi
      }
      trap handle_exit EXIT
      export FILENAME="$filename"
      case "$file" in
        $name.tpl.sh)
          eval "echo \"$(cat "$file")\"" >"$tmpfile"
          ;;
        $name.tpl.erb)
          erb -T - "$file" >"$tmpfile"
          ;;
      esac
      unset FILENAME
      cp "$tmpfile" "$dst"
    fi

    [ "$executable" = "1" ] && chmod a+x "$dst"

    if [ "$edit" = "1" ]; then
      "${EDITOR:-vim}" "$dst"
    else
      echo "File $dst generated."
    fi
  fi
}

gen_bin_wrapper() {
  gen -d "$HOME/.dotfiles/bin" -p -e -x bin_wrapper
}

gen_install() {
  gen -d "$HOME/.dotfiles/scripts/install" -p -e -x install
}

gen_license() {
  gen LICENSE
}

gen_readme() {
  gen -e README.md
}

gen_vagrantfile() {
  gen -e Vagrantfile
}

gen_launched() {
  gen -d "$HOME/Library/LaunchAgents" -p -e --ext plist launchd.plist
}

gen_autossh() {
  gen -f "$HOME/Library/LaunchAgents/autossh.plist" -e autossh.plist
}

gen_appium() {
  gen -f "$HOME/Library/LaunchAgents/appium.plist" -e appium.plist
}

gen_ssh_hosts() {
  gen -e -f "$HOME/.ssh_hosts" ssh_hosts
}

gen_mvn_settings() {
  gen -e -f "$HOME/.m2/settings.xml" mvn_settings.xml
}

gen_editorconfig() {
  gen -e -f .editorconfig editorconfig
}

gen_password() {
  source "$dotfiles_dir/scripts/lib/utils/random.sh"
  local password="$(random_string 15)"
  echo "$password"
  echo
  echo -n "$password" | cb --log-level short
}

gen_uuid() {
  source "$dotfiles_dir/scripts/lib/prompt.sh"
  local reply="$(yesno "Keep dash? (Y/n)" "yes")"
  local cmd="uuidgen | tr A-Z a-z"
  local uuid
  if [ "$reply" = "yes" ]; then
    uuid="$(eval $cmd)"
  else
    uuid="$(eval $cmd | sed -e 's/\-//g')"
  fi
  echo
  echo "$uuid"
  echo
  echo -n "$uuid" | cb --log-level short
}

gen_zshrc_local() {
  gen -e -f "$HOME/.zshrc.local" zshrc.local
}

gen_nginx_service() {
  gen --ask-filename --ask-filename-default "nginx" nginx_service
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -q)
      query="$2"
      shift
      ;;
    --no-editor)
      no_editor=1
      ;;
    bin_wrapper | install | license | readme | vagrantfile | launchd | ssh_hosts |\
      mvn_settings)
      template="$1"
      ;;
    *)
      usage
      ;;
  esac
  shift
done

if [ -n "$template" ]; then
  "gen_$template"
  exit
fi

FZF_COMMANDS="Bin wrapper or plain old executable\tgen_bin_wrapper
Installation script\tgen_install
MIT license\tgen_license
README.md or Markdown template\tgen_readme
Vagrantfile\tgen_vagrantfile
Mac OSX User daemon/agent plist file\tgen_launched
SSH hosts for wrapper utility\tgen_ssh_hosts
Maven settings\tgen_mvn_settings
Editor config\tgen_editorconfig
Autossh plist file for Mac OSX\tgen_autossh
Appium plist file for Mac OSX\tgen_appium
Random string, password, etc.\tgen_password
UUID\tgen_uuid
Local zshrc\tgen_zshrc_local
Nginx docker-compose service\tgen_nginx_service"

source "$dotfiles_dir/scripts/lib/cmd_fzf.sh"

cmd_fzf --query "$query"
