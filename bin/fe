#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF 1>&2
Usage: $0 [starting-directory]

Use fzf to select a file and open it with the default editor. You can also
press ctrl-v to create a new file from the selected file and edit it.

Options:

  [-t type] The file type to search, e.g. cpp
  [-p pattern] The pattern to search
  [-h] Show help

Examples:

  # Search files by type.
  $ $0 -t cpp

  # Search files with .cpp extension.
  $ $0 -p '\.cpp$'
EOF
  exit 1
}

remainder=()
while [ $# -gt 0 ]; do
  case "$1" in
    -t)
      shift
      pattern="\.$1$"
      ;;
    -p)
      shift
      pattern="$1"
      ;;
    -*)
      usage
      ;;
    *)
      remainder+=("$1")
      ;;
  esac
  shift
done

set - "${remainder[@]}"

dir="${1:-.}"
if [ -n "$dir" -a ! -d "$dir" ]; then
  echo "Directory $dir does not exist."
  exit 1
fi
shift || true

source ~/.dotfiles/scripts/lib/utils/common.sh
source ~/.dotfiles/scripts/lib/fzf.sh

call_fzf files --query="$1" --multi --select-1 --exit-0 \
  --prompt '(CTRL-V:copy CTRL-Y:yank CTRL-R:run)> ' \
  --expect="ctrl-v" \
  --expect="ctrl-r" \
  < <(fd --type f "${pattern:-.}" "$dir")

if [ "${files[0]}" = "ctrl-v" ]; then
  src_file="${files[1]}"
  if [ -z "$src_file" ]; then
    echo 'A source file is required when creating a new file.'
    exit 1
  fi
  while true; do
    target_file=$(rlwrap -S "Target file: " -P "$src_file" -o cat)
    if [ -e "$target_file" ]; then
      echo "File '$target_file' already exists"
    else
      break
    fi
  done
  cp "$src_file" "$target_file"
  files=("$target_file")
elif [ "${files[0]}" = "ctrl-r" ]; then
  file="${files[1]}"
  if [ -x "$file" ]; then
    echo "$file" >&3
    exit 101
  else
    echo "$file is not an executable."
    exit 1
  fi
elif [ -z "${files[0]}" ]; then
  echo "No file available"
  exit
fi

if [ -n "$files" ]; then
  editor=${EDITOR:-vim}
  if [ "$editor" = "vi" -o "$editor" = "vim" -o "$editor" = "nvim" ]; then
    # Invoke `Rooter` command to change to correct root directory.
    args="+Rooter"
  fi
  $editor $args ${files[@]}
fi
