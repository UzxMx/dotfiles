#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
git_dir="$dotfiles_dir/scripts/git"

usage() {
  cat <<-EOF
Wrapper for git utility.

Subcommands:
  cl              - clone with depth 1
  d               - enhanced diff utility by fzf
  ignore          - output .gitignore contents for some topic
  cm              - enhanced commit utility
  pt              - push a local branch to a remote branch
  l               - enhanced log utility by fzf
  show_commit     - show files of a commit by fzf and tmux
  rm_from_history - remove files from git history
  fzf         - search a command by its description and execute
EOF
  exit 1
}

FZF_COMMANDS="Change the last commit message (the commit has not been pushed)\tgit commit --amend
"

cmd_ignore() {
  # See https://docs.gitignore.io/install/command-line
  curl -sL "https://www.toptal.com/developers/gitignore/api/$@"
}

usage_cm() {
  cat <<-EOF 1>&2
Usage: g cm [<message>]

Enhanced commit utility.
EOF
  exit 1
}

cmd_cm() {
  local args=()
  if [ -n "$1" ]; then
    args+=(-m "$1")
  fi
  source "$dotfiles_dir/scripts/lib/prompt.sh"
  local date
  ask_for_input date "Commit date: " "$(date "+%Y-%m-%d %H:%M:%S")"
  git commit -s --date "$date" "${args[@]}"
}

run() {
  local cmd="$1"
  shift
  case "$1" in
    -h)
      type "usage_$cmd" &>/dev/null && "usage_$cmd"
      ;;
  esac
  "cmd_$cmd" "$@"
}

case "$1" in
  "")
    git status .
    ;;
  fzf)
    source "$dotfiles_dir/scripts/lib/cmd_fzf.sh"
    run "$@"
    ;;
  cl | d | l | show_commit | pt | rm_from_history)
    case "$1" in
      cl)
        name="clone"
        ;;
      d)
        name="diff"
        ;;
      l)
        name="log"
        ;;
      pt)
        name="push_to"
        ;;
      *)
        name="$1"
        ;;
    esac
    source "$git_dir/$name.sh"
    run "$@"
    ;;
  ignore | cm)
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    git "$@"
    ;;
  *)
    git "$@"
    ;;
esac
