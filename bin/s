#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF 1>&2
Usage: $0 [starting-directory]

Search file contents.

Shortcuts:
  <enter>: Open selected file in curren shell.
  ctrl-v: View selected file in tmux panel.

Options:

  [-t type] The file type to search, e.g. cpp
  [-h] Show help

Examples:

  # Only search files matching some type.
  $ $0 -t cpp
EOF
  exit 1
}

rg_options=()

remainder=()
while [ $# -gt 0 ]; do
  case "$1" in
    -t)
      shift
      rg_options+=("-t" "$1")
      ;;
    -*)
      usage
      ;;
    *)
      remainder+=("$1")
      ;;
  esac
  shift
done

set - "${remainder[@]}"

target=${1:-.}
if [ ! -d "$target" ]; then
  echo 'Target should be a directory.'
  exit 1
fi

source ~/.dotfiles/scripts/lib/utils/common.sh
source ~/.dotfiles/scripts/lib/fzf.sh

# Note: {} is single quoted in fzf, so below we use `$(echo -n {2})` to strip single quotes.
# Ref:
#   https://github.com/junegunn/fzf#executing-external-programs
#   https://github.com/junegunn/fzf/issues/1586#issuecomment-495961993
export BAT_STYLE="numbers,header"
call_fzf result --delimiter=: --nth=3.. --preview '~/.vim/plugged/fzf.vim/bin/preview.sh {1}:{2}' \
  --prompt '(CTRL-V:vsplit CTRL-Y:yank)> ' \
  --bind 'ctrl-v:execute(tmux split-window "vi {1} \"+norm $(echo -n {2})G\"")' \
  < <(rg --line-number --hidden "${rg_options[@]}" . "$target")

# Above we didn't pass in any `--expect=`, so the array size is only 1.
selection=${result[0]}
if [ -n "$selection" ]; then
  file=$(echo -E "$selection" | awk -F : '{print $1}')
  lineno=$(echo -E "$selection" | awk -F : '{print $2}')
fi

if [ -n "$file" -a -n "$lineno" ]; then
  cmd="vi '$file' '+norm ${lineno}G'"
  eval $cmd
fi
