#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Usage: s [directory-or-file]...

Search file contents.

Shortcuts:
  <enter>: Open selected file in curren shell.
  ctrl-v: View selected file in tmux panel.

Options:
  [-t type] The file type to search, e.g. cpp
  [--binary] Resort to grep searching binary files
  [-h] Show help

Examples:
  # Only search files matching some type.
  $ s -t cpp
EOF
  exit 1
}

rg_options=()

files=()
while [ $# -gt 0 ]; do
  case "$1" in
    -t)
      shift
      rg_options+=("-t" "$1")
      ;;
    --binary)
      search_binary=1
      ;;
    -*)
      usage
      ;;
    *)
      files+=("$1")
      ;;
  esac
  shift
done

if [ "${#files}" -eq 0 ]; then
  files=(.)
fi

source "$dotfiles_dir/scripts/lib/utils/common.sh"
source "$dotfiles_dir/scripts/lib/fzf.sh"

# rg doesn't support --binary well. So we resort to grep.
if [ "$search_binary" = "1" ]; then
  cmd=(grep --line-number --binary-files=text . -R "${files[@]}")
else
  cmd=(rg --line-number --with-filename --hidden "${rg_options[@]}" . "${files[@]}")
fi

# Note: {} is single quoted in fzf, so below we use `$(echo -n {2})` to strip single quotes.
# Ref:
#   https://github.com/junegunn/fzf#executing-external-programs
#   https://github.com/junegunn/fzf/issues/1586#issuecomment-495961993
export BAT_STYLE="numbers,header"
call_fzf result --delimiter=: --nth=3.. --preview '~/.vim/plugged/fzf.vim/bin/preview.sh {1}:{2}' \
  --prompt '(CTRL-V:vsplit CTRL-Y:yank)> ' \
  --bind 'ctrl-v:execute(tmux split-window "vi {1} \"+norm $(echo -n {2})G\"")' \
  < <("${cmd[@]}")

# Above we didn't pass in any `--expect=`, so the array size is only 1.
selection=${result[0]}
if [ -n "$selection" ]; then
  file=$(echo -E "$selection" | awk -F : '{print $1}')
  lineno=$(echo -E "$selection" | awk -F : '{print $2}')
fi

if [ -n "$file" -a -n "$lineno" ]; then
  cmd="vi '$file' '+norm ${lineno}G'"
  eval $cmd
fi
