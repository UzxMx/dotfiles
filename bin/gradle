#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
gradle_dir="$dotfiles_dir/scripts/gradle"

source "$dotfiles_dir/scripts/lib/utils/find.sh"
gradle_bin="$(find_file_hierarchical gradlew)"

usage() {
  cat <<-EOF
Wrapper for gradle utility.

It tries to find a gradle wrapper first. If not found, it resorts to gradle
command.

Subcommands:
  help    - show gradle help
  tasks   - show all tasks
  bootRun - run spring-boot based project
  mirror  - manage(show/enable/disable) maven mirrors

Tasks:
  showRepos                - show repositories
  showBuildScriptRepos     - show buildscript repositories
  showBuildScriptClasspath - show buildscript classpath
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

alias_cmd() {
  local new_name="$1"
  local old_name="$2"
  eval "
    usage_$new_name() {
      usage_$old_name \"\$@\"
    }
    cmd_$new_name() {
      cmd_$old_name \"\$@\"
    }
  "
}

run() {
  local cmd="$1"
  shift
  case "$1" in
    -h)
      type "usage_$cmd" &>/dev/null && "usage_$cmd"
      ;;
  esac
  "cmd_$cmd" "$@"
}

run_task() {
  local script="$1"
  local task="$2"
  shift 2
  local initdir="$HOME/.gradle/init.d"
  mkdir -p "$initdir"
  tmpfile="$(mktemp -u --suffix=.gradle -p "$initdir")"
  handle_exit() {
    [ -e "$tmpfile" ] && rm "$tmpfile"
  }
  trap handle_exit EXIT
  cp "$dotfiles_dir/gradle/lib/$script" "$tmpfile"
  "$gradle_bin" "$task" "$@"
}

def_task_cmds() {
  local script="$1"
  local cmd
  for cmd in "$@"; do
    eval "
      cmd_$cmd() {
        run_task \"$script\" \"$cmd\" \"\$@\"
      }
    "
  done
}

case "$1" in
  tasks | bootRun | mirror)
    source "$gradle_dir/$1.sh"
    run "$@"
    ;;
  showRepos | showBuildScriptRepos | showBuildScriptClasspath)
    source "$gradle_dir/utils.sh"
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    "$gradle_bin" "$@"
    ;;
  *)
    "$gradle_bin" "$@"
    ;;
esac
