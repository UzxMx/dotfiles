#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
settings="$HOME/.m2/settings.xml"

usage() {
  cat <<-EOF
Wrapper for mvn utility.

Subcommands:
  gen               - generate a project from an archetype
  remote_archetypes - get remote archetypes
  download_jar      - download jar into ~/.m2
  mirror            - manage(show/enable/disable) aliyun mirror
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

make_sure_artifact_exists() {
  local group_id="$1"
  local artifact_id="$2"
  local version="$3"

  if [ ! -f "$HOME/.m2/repository/$(echo $group_id | tr . /)/$artifact_id/$version/$artifact_id-$version.jar" ]; then
    cmd_download_jar -g  "$group_id" -a "$artifact_id" -v "$version"
  fi
}

usage_gen() {
  cat <<-EOF
Usage: mvn gen

Generate a project from an archetype. If a desired archetype cannot be found,
you can first run 'remote_archetypes' subcommand to check if it exists in
remote. If not, you can make one and add it here for later use.
EOF
  exit 1
}

cmd_gen() {
  # Each line of archetypes is of such format:
  #
  #   <description>\t<group_id>:<artifact_id>:<version>
  #
  # If group id is omitted, it defaults to `org.apache.maven.archetypes` which
  # is the official group for archetypes.
  local archetypes="Template archetype\t:maven-archetype-archetype:1.4
Simple Java project\t:maven-archetype-quickstart:1.4
Simple web project\t:maven-archetype-webapp:1.4
Spring boot simple sample\torg.springframework.boot:spring-boot-sample-simple-archetype:1.0.2.RELEASE
Spring boot webmvc project\tio.fabric8.archetypes:spring-boot-webmvc-archetype:2.2.197"

  local line="$(echo -e "$archetypes" | fzf -d "\t" --with-nth=1)"
  [ -z "$line" ] && exit
  local archetype="$(echo "$line" | awk -F "\t" '{print $2}')"
  local group_id="$(echo "$archetype" | awk -F: '{print $1}')"
  group_id="${group_id:-org.apache.maven.archetypes}"
  local artifact_id="$(echo "$archetype" | awk -F: '{print $2}')"
  local version="$(echo "$archetype" | awk -F: '{print $3}')"

  make_sure_artifact_exists "$group_id" "$artifact_id" "$version"

  # The value for `archetypeCatalog` can be `internal`, `local` and `remote`.
  # When using `local`, mvn won't check remote archetypes, this will be faster.
  # For more info, see
  # `https://maven.apache.org/archetype/maven-archetype-plugin/specification/archetype-catalog.html`.
  mvn archetype:generate -DarchetypeCatalog=local \
    -DarchetypeGroupId="$group_id" \
    -DarchetypeArtifactId="$artifact_id" \
    -DarchetypeVersion="$version"
}

usage_download_jar() {
  cat <<-EOF
Usage: mvn download_jar [-g <group_id>] [-a <artifact_id>] [-v <version>] [--with-source]

Download jar into ~/.m2 without using a pom.xml.

Example:
  $> mvn download_jar -g org.apache.maven.archetypes -a maven-archetype-archetype -v 1.4 --with-source
EOF
  exit 1
}

cmd_download_jar() {
  local group_id artifact_id version download_source
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -g)
        group_id="$2"
        shift 2
        ;;
      -a)
        artifact_id="$2"
        shift 2
        ;;
      -v)
        version="$2"
        shift 2
        ;;
      --with-source)
        download_source=1
        shift
        ;;
      *)
        usage_download_jar
        ;;
    esac
  done
  source "$dotfiles_dir/scripts/lib/prompt.sh"
  ask_for_input group_id "Group id: "
  ask_for_input artifact_id "Artifact id: "
  ask_for_input version "Version: "
  local artifact="$group_id:$artifact_id:$version:jar"
  mvn dependency:get -Dartifact="$artifact"
  if [ "$download_source" = "1" ]; then
    mvn dependency:get -Dartifact="$artifact:sources"
  fi
}

usage_remote_archetypes() {
  cat <<-EOF 1>&2
Usage: mvn remote_archetypes

Get remote archetypes.
EOF
  exit 1
}

cmd_remote_archetypes() {
  local tmpfile="$(mktemp)"
  "$dotfiles_dir/bin/cget" "https://repo.maven.apache.org/maven2/archetype-catalog.xml" "$tmpfile"
  "${EDITOR:-vim}" "$tmpfile"
  rm -rf "$tmpfile"
}

usage_mirror() {
  cat <<-EOF
Usage: mvn mirror [-e | -d]

Manage(show/enable/disable) aliyun mirror for maven. By default it shows
whether aliyun mirror is enabled.

Options:
  -e Enable aliyun mirror
  -d Disable aliyun mirror
EOF
  exit 1
}

aliyun_mirror_enabled() {
  [ -f "$settings" ]  && xmllint --xpath "//*[local-name()='mirror']/*[local-name()='id' and text()='aliyun']" "$settings" &>/dev/null;
}

show_aliyun_mirror() {
  if aliyun_mirror_enabled; then
    echo Aliyun mirror is enabled.
  else
    echo Aliyun mirror is NOT enabled.
  fi
}

enable_aliyun_mirror() {
  [ -f "$settings" ] || "$dotfiles_dir/bin/gen" mvn_settings --no-editor
  source "$dotfiles_dir/scripts/lib/awk/find_line.sh"
  source "$dotfiles_dir/scripts/lib/awk/insert_file.sh"

  local lineno="$(awk_find_line "$settings" "</mirrors>")"
  awk_insert_file - "$settings" "$lineno" <<EOF
<mirror>
  <id>aliyun</id>
  <mirrorOf>central</mirrorOf>
  <name>Aliyun mirror for maven</name>
  <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
EOF
}

# We disable the mirror by finding the line range which satisfies below pattern:
#
#   <mirror>
#     <id>aliyun</id>
#     ...
#   </mirror>
disable_aliyun_mirror() {
  source "$dotfiles_dir/scripts/lib/awk/find_line.sh"
  local range="$(awk_find_line_range "$settings" "<id>aliyun</id>" "<mirror>" "</mirror>")"
  [ -n "$range" ] && sed -i "$(echo "$range" | tr " " ,)d" "$settings"
}

cmd_mirror() {
  local action="show"
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -e)
        action="enable"
        ;;
      -d)
        action="disable"
        ;;
      *)
        usage_mirror
        ;;
    esac
    shift
  done

  if [ "$action" = "enable" ]; then
    aliyun_mirror_enabled || enable_aliyun_mirror
  elif [ -f "$settings" -a "$action" = "disable" ]; then
    aliyun_mirror_enabled && disable_aliyun_mirror
  fi
  show_aliyun_mirror
}

case "$1" in
  gen | remote_archetypes | download_jar | mirror)
    cmd="$1"
    shift
    case "$1" in
      -h)
        type "usage_$cmd" &>/dev/null && "usage_$cmd"
        ;;
    esac
    "cmd_$cmd" "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    mvn "$@"
    ;;
  *)
    mvn "$@"
    ;;
esac
