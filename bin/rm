#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Wrapper for rm utility. When used with pipe operator, it will identify each
line as a file and remove it.

When the filename is in a special form, e.g. '-h', you can remove it by:

  $> rm -- -h
  $> rm ./-h

Subcommands:
  by_inum - remove a file by inode number
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

usage_by_inum() {
  cat <<-EOF
Usage: rm by_inum <inum>

Remove a file by inode number. This command can be used when the filename
contains special characters. You can use 'ls -li' to find the inode of
the file.

Example:
  $> rm by_inum 11273502
EOF
  exit 1
}

cmd_by_inum() {
  find . -maxdepth 1 -inum "$1" -exec rm -i {} \;
}

run_fallback() {
  local extra_args=()
  local has_file
  if [ ! -t 0 ]; then
    for opt in "$@"; do
      case "$opt" in
        -*)
          ;;
        *)
          has_file=1
          break
          ;;
      esac
    done

    if [ -z "$has_file" ]; then
      while read input; do
        extra_args+=("$input")
      done
      if [ "${#extra_args[@]}" -gt 0 ]; then
        source "$dotfiles_dir/scripts/lib/prompt.sh"
        echo -e "These files will be removed:\n${extra_args[@]}"
        if [ ! "$(yesno "Continue? (y/N)" "no")" = "yes" ]; then
          echo Cancelled
          exit
        fi
      fi
    fi
  fi

  rm "$@" "${extra_args[@]}"
}

case "$1" in
  by_inum)
    cmd="$1"
    shift
    case "$1" in
      -h)
        type "usage_$cmd" &>/dev/null && "usage_$cmd"
        ;;
    esac
    "cmd_$cmd" "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    run_fallback "$@"
    ;;
  *)
    run_fallback "$@"
    ;;
esac
