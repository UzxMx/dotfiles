#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Wrapper for ip utility.

Subcommands:
  l, local - get the local IP of the current machine
  my       - get the external IP of the current machine
  geo      - get the geo info of an IP
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

usage_my() {
  cat <<-EOF
Usage: ip my [--concise]

**Updates**:

The following methods seem not working anymore. Instead, we use 'httpbin.org'
to find our public IP.

Get the external IP of the current machine. We use below APIs to query:

  * https://www.ip138.com
  * https://major.io/icanhazip-com-faq/

We may also use 'https://ipinfo.io/ip' to query.

Note: when visiting different sites, the external IP address may change. To
get all possible results, we first visit a site hosted in China, then a site
abroad, and compare them.

Options:
  --concise Only output IPs.

Example:
  $> ip my
EOF
  exit 1
}

cmd_my() {
  local concise=
  case "$1" in
    --concise)
      concise=1
      ;;
    -*)
      usage_my
  esac

  # # See https://www.ip138.com
  # local ip1=$(curl --silent 'https://202020.ip138.com/' \
  #   -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36' | \
  #   xmllint --html --xpath "/html/head/title/text()" - 2>/dev/null | awk -F 'ï¼š' '{print $2}')
  #
  # local ip2=$(curl --silent https://ipv4.icanhazip.com/)
  #
  # if [ -n "$ip1" -a -n "$ip2" -a ! "$ip1" = "$ip2" ]; then
  #   if [ ! "$concise" = "1" ]; then
  #     echo Got two different IP addresses:
  #   fi
  #   echo $ip1
  #   echo $ip2
  #   exit
  # fi
  #
  # local ip
  # if [ -n "$ip1" ]; then
  #   ip="$ip1"
  # fi
  # if [ -n "$ip2" ]; then
  #   ip="$ip2"
  # fi

  ip="$(curl -s httpbin.org/get | jq -r '.origin')"

  echo "$ip" | tee >("$dotfiles_dir/bin/cb" >/dev/null)
  if [ ! "$concise" = "1" ]; then
    cmd_geo "$ip"
  fi
}

usage_geo() {
  cat <<-EOF
Usage: ip geo <ip>

Get the geo info of an IP.

Example:
  $> ip geo 8.8.8.8
EOF
  exit 1
}

cmd_geo() {
  [ -z "$1" ] && usage_geo

  # Note: we get our external IP geo info when query is empty.
  local result="$(curl -s "http://api.geoiplookup.net/?query=$1")"
  if [ -n "$result" ]; then
    local isp="$(echo "$result" | xmllint --html --xpath "//result/isp/text()" - 2>/dev/null)"
    local city="$(echo "$result" | xmllint --html --xpath "//result/city/text()" - 2>/dev/null)"
    local country_name="$(echo "$result" | xmllint --html --xpath "//result/countryname/text()" - 2>/dev/null)"
    echo "$isp - $city - $country_name"
  else
    local json="$(curl -s https://ipvigilante.com/$1)"
    local address=($(echo $json | jq -r '.data.continent_name, .data.country_name, (.data.subdivision_1_name | select(. != null)), (.data.subdivision_2_name | select(. != null)), .data.city_name'))
    local location="($(echo $json | jq -r '.data.longitude'),$(echo $json | jq -r '.data.latitude'))"
    local IFS=","
    echo "${address[*]} $location"
  fi
}

run_fallback() {
  if ! type ip &>/dev/null; then
    echo "Command ip not found."
    exit 1
  fi
  ip "$@"
}

case "$1" in
  my | geo)
    cmd="$1"
    shift
    case "$1" in
      -h)
        type "usage_$cmd" &>/dev/null && "usage_$cmd"
        ;;
    esac
    "cmd_$cmd" "$@"
    ;;

  -h)
    usage
    ;;
  -)
    shift
    run_fallback "$@"
    ;;
  *)
    run_fallback "$@"
    ;;
esac
