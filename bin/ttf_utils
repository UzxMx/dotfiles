#!/usr/bin/env ruby

require 'thor'
require 'ttfunk'

class Main < Thor
  attr_reader :file

  def initialize(*args, &block)
    super(*args, &block)

    if filename = options[:filename]
      @file = TTFunk::File.open(filename)
    end
  end

  def self.shared_options
    option :filename, required: true, aliases: :f, desc: 'The .ttf font file name'
  end

  desc 'lookup', 'Lookup a character in .ttf file'
  shared_options
  option :character, required: true, aliases: :c, desc: 'The character to lookup'
  def lookup
    character = options[:character].chars.first
    character_code = character.unpack('U*').first
    puts "character       : #{character}"
    puts "unicode(decimal): #{character_code}"
    puts "unicode(hex)    : #{format('0x%04x', character_code)}"

    glyph_id = file.cmap.unicode.first[character_code]
    unless glyph = file.glyph_outlines.for(glyph_id)
      puts 'glyph not found'
      return
    end

    puts "glyph id        : #{glyph_id}"
    puts format('glyph type      : %s', glyph.class.name.split(/::/).last.downcase)
    puts format('glyph size      : %db', glyph.raw.length)
    puts format('glyph bbox      : (%d,%d)-(%d,%d)', glyph.x_min, glyph.y_min, glyph.x_max, glyph.y_max)

    if glyph.compound?
      puts format('components    : %d %s', glyph.glyph_ids.length, glyph.glyph_ids.inspect)
    end
  end

  desc 'info', 'Show a .ttf file info'
  shared_options
  def info
    puts format('revision  : %08x', file.header.font_revision)
    puts "name      : #{file.name.font_name.join(', ')}"
    puts "family    : #{file.name.font_family.join(', ')}"
    puts "subfamily : #{file.name.font_subfamily.join(', ')}"
    puts "postscript: #{file.name.postscript_name}"
    puts "units/em  : #{file.header.units_per_em}"
    puts "ascent    : #{file.ascent}"
    puts "descent   : #{file.descent}"
    puts "line gap  : #{file.line_gap}"
    puts format('bbox      : (%d,%d)-(%d,%d)', *file.bbox)
  end
end

Main.start(ARGV)
