#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF 1>&2
Wrapper for openssl utility. Pass in '-' to call the original.

Provided subcommands include:

  * exp: show expiration info

      $> openssl exp example.com

  * exp_file: show expiration info by file

      $> openssl exp_file cert.pem

  * verify: verify a host

      $> openssl verify example.com

  * pubkey: get public key of a host

      $> openssl pubkey example.com

  * cert: get certificate of a host

      $> openssl cert example.com

  * tlsversions: show supported tls versions of remote server

      $> openssl tlsversions example.com

Global options:

  [-h] Show help
EOF
  exit 1
}

source ~/.dotfiles/scripts/lib/path.sh
PATH=$(new_path_exclude ~/.dotfiles/bin)

show_expiration() {
  echo | openssl s_client -connect $1:443 -servername $1 2>/dev/null | openssl x509 -noout -dates
}

host="$2"
case "$1" in
  exp)
    show_expiration $host
    ;;
  exp_file)
    openssl x509 -enddate -noout -in $2
    ;;
  verify)
    openssl s_client -connect $host:443 -servername $host < /dev/null
    show_expiration $host
    ;;
  pubkey)
    openssl s_client -connect $host:443 -servername $host 2>/dev/null < /dev/null | openssl x509 -pubkey -noout
    ;;
  cert)
    openssl s_client -connect $host:443 -servername $host 2>/dev/null < /dev/null | openssl x509
    ;;
  tlsversions)
    versions=(1 1_1 1_2 1_3)
    for version in "${versions[@]}"; do
      expected=$(echo "Protocol *: *TLSv$version" | tr _ .)
      if openssl s_client -tls$version -connect $host:443 2>/dev/null < /dev/null | grep "$expected" >/dev/null; then
        supported=
      else
        supported=not
      fi
      printf "TLSv%-3s %3s supported\n" "$version" "$supported" | tr _ .
    done
    ;;
  -h)
    usage
    ;;
  -)
    shift
    ;&
    # Fall through
  *)
    openssl "$@"
    ;;
esac
