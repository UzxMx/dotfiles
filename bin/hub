#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Wrapper for hub utility.

Subcommands:
  create - create a github repo
  clone - clone a github repo
  download - download an archive for a specific revision
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

usage_create() {
  cat <<-EOF
Usage: hub create [name]

Create a github repo.

Example:
  $> hub create

  # Create a repo named as foo.
  $> hub create foo
EOF
  exit 1
}

cmd_create() {
  if ! git status &>/dev/null; then
    git init
  fi

  local name="$1"
  if [ -z "$name" ]; then
    name="$(basename "$(pwd)")"
  fi
  name="$(rlwrap -S "Repo name: " -P "$name" -o cat)"
  if [ -z "$name" ]; then
    echo 'Repo name is required.'
    exit 1
  fi
  local description="$(rlwrap -S "Description (Optional): " -o cat)"
  hub create -d "$description" "$name"

  if [ -n "$(git log --oneline 2>/dev/null | head -1)" ]; then
    git push -u
  fi
}

usage_clone() {
  cat <<-EOF
Usage: hub clone <arg>

Clone a github repo.

Example:
  $> hub clone

  # Clone a repo named as foo.
  $> hub clone foo
EOF
  exit 1
}

cmd_clone() {
  local name="$1"
  if [ -z "$name" ]; then
    name="$(rlwrap -S "Repo name to clone: " -o cat)"
    if [ -z "$name" ]; then
      echo 'Repo name is required.'
      exit 1
    fi
  fi

  hub clone "$name"
}

usage_download() {
  cat <<-EOF
Usage: hub download [-d dest-dir] <project> [revision]

Download an archive for a specific revision. By default the revision is master.
EOF
  exit 1
}

cmd_download() {
  local dest_dir
  local remainder=()
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -d)
        shift
        dest_dir="$1"
        ;;
      -*)
        usage_download
        ;;
      *)
        remainder+=("$1")
        ;;
    esac
    shift
  done
  set - "${remainder[@]}"

  [ -e "$dest_dir" ] && echo "Directory $dest_dir already exists." && exit 1

  local project="$1"
  local revision="${2:-master}"
  tmpdir="$(mktemp -d)"
  tmpfile="$(mktemp)"
  handle_exit() {
    [ -e "$tmpdir" ] && rm -rf "$tmpdir"
    [ -e "$tmpfile" ] && rm "$tmpfile"
  }
  trap handle_exit EXIT
  curl -o "$tmpfile" -L "https://github.com/$project/archive/$revision.zip"
  (cd "$tmpdir"; unzip "$tmpfile")
  mv "$tmpdir/$(ls "$tmpdir")" "${dest_dir:-.}"
}

case "$1" in
  create | clone | download)
    cmd="$1"
    shift
    case "$1" in
      -h)
        type "usage_$cmd" &>/dev/null && "usage_$cmd"
        ;;
    esac
    "cmd_$cmd" "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    hub "$@"
    ;;
  *)
    hub "$@"
    ;;
esac
