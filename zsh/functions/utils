# vim: ft=zsh

# Make directory and change into it
mc() {
  mkdir -p "$1" && cd "$1"
}

todo() {
  vi ~/.dotfiles/doc/todo.md
}

enable_pry_rails() {
  unset DISABLE_PRY_RAILS
}

disable_pry_rails() {
  export DISABLE_PRY_RAILS=1
}

_fed() {
  local IFS target dir editor
  dir=$1
  shift
  IFS=$'\n'
  target=($(fd --type d --maxdepth 1 . $dir | fzf --query="$1" --select-1 --exit-0))
  if [ -n "$target" ]; then
    editor=${EDITOR:-vim}
    # Use brace to restore working directory
    (cd $target && $editor $target)
  fi
}

alias fevp="_fed ~/.vim/plugged"

# Select a directory from current directory and change to there.
fcd() {
  local dir
  dir=$(fd ${1:-.} --type d 2> /dev/null | fzf +m) && cd "$dir"
}

# Select a directory from configured directory lists and change to there.
c() {
  local dir
  local lines="\
$(find ~/.dotfiles -maxdepth 1 -type d -not -path "$HOME/.dotfiles/.git")
$HOME/tmp
$(if type zsh_utils_cd_path_fn &>/dev/null; then; zsh_utils_cd_path_fn; fi)\
"
  dir=$(echo "$lines" | fzf +m) && cd "$dir"
}

# `ZSH_UTILS_SSH_HOSTS` defines an array of ssh hosts. Each item can be composed
# of a human-readable description and an optional command to be executed when
# selected. When the command is omitted, the description must obey the format
# `user@host` or `user@host:port` to help to infer the command. The description
# and the optional command are separated by `\t`, and they shouldn't contain `\t`.
ssh() {
  local -a result
  local key list host port
  if [ $# -eq 0 -a -n "$ZSH_UTILS_SSH_HOSTS" ]; then
    join_to_lines $ZSH_UTILS_SSH_HOSTS | call_fzf result --delimiter="\t" --with-nth=1 --expect=ctrl-e

    if [ ${#result[@]} -eq 2 ]; then
      key="${result[1]}"
      host="${result[2]}"
    else
      host="${result[1]}"
    fi

    if [ -n "$host" ]; then
      split_str_into_array "$host" "\t" list
      cmd=${list[2]}
      split_str_into_array "${list[1]}" ":" list
      host=${list[1]}
      port=${list[2]:-22}
      if [ -z "$cmd" ]; then
        cmd="ssh -p $port $host"
      fi
      if [ "$key" = "ctrl-e" ]; then
        print -z "$cmd"
      else
        print -s "$cmd"
        eval $cmd
      fi
    fi
  else
    command ssh $@
  fi
}

# Copy with progress
cp_p() {
  rsync -WavP --human-readable --progress $1 $2
}

# Extract archive
x() {
  local dir
  dir="$(~/.dotfiles/bin/extract "$1")"
  if [ "$?" -eq "0" -a -n "$dir" ]; then
    cd "$dir"
  fi
}

a() {
  local script
  if [ $# -lt 2 ]; then
    script=$(~/.dotfiles/scripts/asdf_common_workflow.sh "$@")
    if [ $? -eq 0 -a -n "$script" ]; then
      eval "$script"
    fi
  else
    asdf "$@"
  fi
}
