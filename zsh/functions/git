# vim: ft=zsh

# No arguments: `git status`
# With one argument `.`: `git status .`
# With arguments: acts like `git`
g() {
  if [ $# -eq 1 -a "$1" = "." ]; then
    git status .
  elif [ $# -gt 0 ]; then
    git "$@"
  else
    git status
  fi
}

gi() {
  curl -s "https://www.gitignore.io/api/$*"
}

_fbranch() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##"
}

# fbr - checkout git branch (including remote branches)
fbr() {
  local branch=$(_fbranch)
  if [ -n "$branch" ]; then
    git checkout $branch
  fi
}

# ftag - checkout git tag
ftag() {
  local tags tag
  tags=$(git tag) &&
  tag=$(echo "$tags" | fzf +m)
  if [ -n "$tag" ]; then
    git checkout -b $tag $tag
  fi
}

# fmerge - merge git branch
fmerge() {
  local branch=$(_fbranch)
  if [ -n "$branch" ]; then
    local reply=`yesno "Do you want to push after merging? (Y/n)" "yes"`
    git merge $branch
    if [ $? = 0 -a "$reply" = "yes" ]; then
      git push
    fi
  fi
}

fmergeto() {
  local branch
  if branch="$(git symbolic-ref --short HEAD)" && fbr; then
    local reply=`yesno "Do you want to push after merging? (Y/n)" "yes"`
    git pull && git merge $branch
    if [ $? = 0 -a "$reply" = "yes" ]; then
      git push
    fi
  fi
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  local IFS=$'\n'
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    set -f
    lines=($(<<< "$out"))
    set +f
    q="${lines[0]}"
    k="${lines[1]}"
    sha="${lines[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff --color=always $sha | less -r
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show --color=always -p $sha | less -r
    fi
  done
}
