#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF 1>&2
Usage: $0 [--no-editor] [-q <query>] [<template>]

Generate files from a template. When no template is given, it will use fzf to
let user select one.

Options:
  -q <query> Fzf query string
  --no-editor Do not open generated file with an editor
EOF
  exit 1
}

gen() {
  local dst_dir="$(pwd)"
  local ask_filename=0
  local edit=0
  local executable=0
  local extname
  local dst
  while [ "$#" -gt 0 ]; do
    case "$1" in
      # Target directory
      -d)
        shift
        dst_dir="$1"
        shift
        ;;
      # Ask user to input the file name
      -p)
        shift
        ask_filename=1
        ;;
      # Open destination file with EDITOR
      -e)
        shift
        if [ ! "$no_editor" = "1" ]; then
          edit=1
        fi
        ;;
      # Change to executable
      -x)
        shift
        executable=1
        ;;
      --ext)
        shift
        extname="$1"
        shift
        if [ ! "${extname:0:1}" = "." ]; then
          extname=".$extname"
        fi
        ;;
      # Absolute path to the generated file
      -f)
        dst="$2"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done

  local root="$HOME/.templates"
  if [ ! -e "$root" ]; then
    git clone https://github.com/uzxmx/templates "$root" --depth 1
  fi
  local src_root="$root/src"
  local short_name="$1"
  local name="$src_root/$short_name"
  if [ -d "$name" ]; then
    echo "TODO: directory currently is not supported."
  else
    # We don't use regex because of the differences between linux based systems and BSD systems.
    local file="$(find "$src_root" -name "$short_name.tpl" -or -name "$short_name.tpl.sh" -or -name "$short_name.tpl.erb" | head -1)"
    if [ -z "$file" ]; then
      echo No template file found. To resolve this issue, you can try to update the templates repository.
      exit 1
    fi

    local filename
    if [ -z "$dst" ]; then
      if [ "$ask_filename" = "1" ]; then
        while true; do
          filename="$(rlwrap -S "File name: $dst_dir/" -o cat)"
          if [ -n "$extname" ] && [[ ! "$filename" =~ "$extname"$ ]]; then
            filename="$filename$extname"
          fi
          if [ -n "$filename" ]; then
            if [ -e "$dst_dir/$filename" ]; then
              echo "File '$dst_dir/$filename' already exists"
            else
              break
            fi
          fi
        done
      else
        filename="$1"
      fi
      dst="$dst_dir/$filename"
    else
      filename="$(basename "$dst")"
    fi

    if [ -e "$dst" ]; then
      local reply
      echo -n "File $dst already exists, overwrite it or generate a temporary file? (y/N/g)"
      read reply
      if [ "$reply" = "g" ]; then
        dst="$(mktemp)"
        filename="$(basename "$dst")"
      elif [ ! "$reply" = "y" ]; then
        echo Cancelled
        exit
      fi
    fi

    if [ "$file" = "$name.tpl" ]; then
      cp "$file" "$dst"
    else
      tmpfile="$(mktemp)"
      handle_exit() {
        if [ -e "$tmpfile" ]; then
          rm "$tmpfile"
        fi
      }
      trap handle_exit EXIT
      export FILENAME="$filename"
      case "$file" in
        $name.tpl.sh)
          eval "echo \"$(cat "$file")\"" >"$tmpfile"
          ;;
        $name.tpl.erb)
          erb "$file" >"$tmpfile"
          ;;
      esac
      unset FILENAME
      cp "$tmpfile" "$dst"
    fi

    [ "$executable" = "1" ] && chmod a+x "$dst"

    if [ "$edit" = "1" ]; then
      "${EDITOR:-vim}" "$dst"
    else
      echo "File $dst generated."
    fi
  fi
}

gen_bin_wrapper() {
  gen -d "$HOME/.dotfiles/bin" -p -e -x bin_wrapper
}

gen_install() {
  gen -d "$HOME/.dotfiles/scripts/install" -p -e -x install
}

gen_license() {
  gen LICENSE
}

gen_readme() {
  gen -e README.md
}

gen_vagrantfile() {
  gen -e Vagrantfile
}

gen_launched() {
  gen -d "$HOME/Library/LaunchAgents" -p -e --ext plist launchd.plist
}

gen_ssh_hosts() {
  gen -e -f "$HOME/.ssh_hosts" ssh_hosts
}

gen_mvn_settings() {
  gen -e -f "$HOME/.m2/settings.xml" mvn_settings.xml
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    -q)
      query="$2"
      shift
      ;;
    --no-editor)
      no_editor=1
      ;;
    bin_wrapper | install | license | readme | vagrantfile | launchd | ssh_hosts |\
      mvn_settings)
      template="$1"
      ;;
    *)
      usage
      ;;
  esac
  shift
done

if [ -n "$template" ]; then
  "gen_$template"
  exit
fi

FZF_COMMANDS="Bin wrapper or plain old executable\tgen_bin_wrapper
Installation script\tgen_install
MIT license\tgen_license
README.md or Markdown template\tgen_readme
Vagrantfile\tgen_vagrantfile
Mac OSX User daemon/agent plist file\tgen_launched
SSH hosts for wrapper utility\tgen_ssh_hosts
Maven settings\tgen_mvn_settings
"

source ~/.dotfiles/scripts/lib/cmd_fzf.sh

cmd_fzf --query "$query"
