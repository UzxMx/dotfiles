#!/usr/bin/env bash

set -eo pipefail

case "$1" in
  -q)
    query="$2"
    shift 2
    ;;
esac

gen() {
  local dst_dir="$(pwd)"
  local ask_filename=0
  local edit=0
  local executable=0
  local extname=
  while [ "$#" -gt 0 ]; do
    case "$1" in
      # Target directory
      -d)
        shift
        dst_dir="$1"
        shift
        ;;
      # Ask user to input the file name
      -p)
        shift
        ask_filename=1
        ;;
      # Open destination file with EDITOR
      -e)
        shift
        edit=1
        ;;
      # Change to executable
      -x)
        shift
        executable=1
        ;;
      --ext)
        shift
        extname="$1"
        shift
        if [ ! "${extname:0:1}" = "." ]; then
          extname=".$extname"
        fi
        ;;
      *)
        break
        ;;
    esac
  done

  local root="$HOME/.templates"
  if [ ! -e "$root" ]; then
    git clone https://github.com/uzxmx/templates "$root" --depth 1
  fi
  local src_root="$root/src"
  local short_name="$1"
  local name="$src_root/$short_name"
  if [ -d "$name" ]; then
    echo "TODO: directory currently is not supported."
  else
    # We don't use regex because of the differences between linux based systems and BSD systems.
    local file="$(find "$src_root" -name "$short_name.tpl" -or -name "$short_name.tpl.sh" -or -name "$short_name.tpl.erb" | head -1)"
    if [ -z "$file" ]; then
      echo No template file found. To resolve this issue, you can try to update the templates repository.
      exit 1
    fi
    local filename
    if [ "$ask_filename" = "1" ]; then
      while true; do
        filename="$(rlwrap -S "File name: $dst_dir/" -o cat)"
        if [ -n "$extname" ] && [[ ! "$filename" =~ "$extname"$ ]]; then
          filename="$filename$extname"
        fi
        if [ -n "$filename" ]; then
          if [ -e "$dst_dir/$filename" ]; then
            echo "File '$dst_dir/$filename' already exists"
          else
            break
          fi
        fi
      done
    else
      filename="$1"
    fi
    local dst="$dst_dir/$filename"
    if [ -e "$dst" ]; then
      source ~/.dotfiles/scripts/lib/prompt.sh
      if [ ! "$(yesno "File $dst already exists, overwrite it? (y/N)" "no")" = "yes" ]; then
        echo Cancelled
        exit
      fi
    fi
    if [ "$file" = "$name.tpl" ]; then
      cp "$file" "$dst"
    else
      tmpfile="$(mktemp)"
      handle_exit() {
        if [ -e "$tmpfile" ]; then
          rm "$tmpfile"
        fi
      }
      trap handle_exit EXIT
      export FILENAME="$filename"
      case "$file" in
        $name.tpl.sh)
          eval "echo \"$(cat "$file")\"" >"$tmpfile"
          ;;
        $name.tpl.erb)
          erb "$file" >"$tmpfile"
          ;;
      esac
      unset FILENAME
      cp "$tmpfile" "$dst"
    fi

    [ "$executable" = "1" ] && chmod a+x "$dst"

    if [ "$edit" = "1" ]; then
      "${EDITOR:-vim}" "$dst"
    else
      echo "File $dst generated."
    fi
  fi
}

FZF_COMMANDS="Bin wrapper or plain old executable\tgen -d \"$HOME/.dotfiles/bin\" -p -e -x bin_wrapper
Installation script\tgen -d \"$HOME/.dotfiles/scripts/install\" -p -e -x install
MIT license\tgen LICENSE
README.md or Markdown template\tgen -e README.md
Vagrantfile\tgen -e Vagrantfile
Mac OSX User daemon/agent plist file\tgen -d \"$HOME/Library/LaunchAgents\" -p -e --ext plist launchd.plist
"

source ~/.dotfiles/scripts/lib/cmd_fzf.sh

cmd_fzf --query "$query"
