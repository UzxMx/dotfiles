#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF
Utility to setup dotfiles repository in current system.

A type predefines which tools will be installed. Supported types include:

* minimal: only essential tools
* full: all tools, default type

Options:
  -p, --proxy <proxy> http proxy
  -v, --verbose show verbose output
  --update-repo fetch new updates from remote before setting up
  -t, --type setup type, e.g. minimal, full. Default is full
EOF
  exit 1
}

setup_type="full"
while [ "$#" -gt 0 ]; do
  case "$1" in
    -p | --proxy)
      shift
      user_http_proxy="$1"
      ;;
    -v | --verbose)
      export verbose=1
      ;;
    --update-repo)
      update_repo=1
      ;;
    -t | --type)
      shift
      setup_type="$1"
      ;;
    *)
      usage
      ;;
  esac
  shift
done

run() {
  if [ "$verbose" = "1" ]; then
    echo "Run: $@" >&2
  fi
  eval "$@"
}
export -f run

run_with_proxy() {
  if [ -n "$user_http_proxy" ]; then
    export http_proxy=http://$user_http_proxy
    export HTTP_PROXY=http://$user_http_proxy
    export https_proxy=http://$user_http_proxy
    export HTTPS_PROXY=http://$user_http_proxy
  fi

  run "$@"

  if [ -n "$user_http_proxy" ]; then
    unset http_proxy HTTP_PROXY https_proxy HTTPS_PROXY
  fi
}

case "$setup_type" in
  full)
    export setup_coc_python=1
    export setup_java=1
    export setup_coc_java=1
    export setup_go=1
    export setup_gopls=1
    ;;
  minimal)
    ;;
  *)
    usage
    ;;
esac

if ! [ "$(basename $(dirname "$BASH_SOURCE"))" = "bootstrap" -a "$(basename "$(dirname $(dirname "$BASH_SOURCE"))")" = "scripts" ]; then
  # Download and execute stage0 script.
  REMOTE_STAGE0_SCRIPT="${REMOTE_STAGE0_SCRIPT:-https://raw.githubusercontent.com/uzxmx/dotfiles/master/scripts/bootstrap/inc/stage0}"

  is_available() {
    type -p "$1" &> /dev/null
  }

  if ! is_available curl && ! is_available wget; then
    if is_available apt-get; then
      sudo apt-get install -y curl
    elif is_available yum; then
      sudo yum install -y curl
    elif is_available brew; then
      # TODO For mac, install brew if it is unavailable.
      brew install curl
    else
      echo 'Unsupported system'
      exit 1
    fi
  fi

  tmpfile="$(mktemp)"
  handle_exit() {
    [ -e "$tmpfile" ] && rm "$tmpfile"
  }
  trap handle_exit EXIT

  if is_available curl; then
    run_with_proxy curl -o "$tmpfile" "$REMOTE_STAGE0_SCRIPT"
  elif is_available wget; then
    run_with_proxy wget -O "$tmpfile" "$REMOTE_STAGE0_SCRIPT"
  else
    echo 'No curl or wget found'
    exit 1
  fi

  source "$tmpfile"
else
  DOTFILES_ROOT="$(realpath "$(dirname "$BASH_SOURCE")/../..")"
  source "$DOTFILES_ROOT/scripts/bootstrap/inc/stage0"
fi

# Do real setup.
cd "$DOTFILES_ROOT"

source ./scripts/lib/utils.sh

if is_vagrant; then
  run ./scripts/misc/set_sudo_nopasswd
fi

if [ -n "$user_http_proxy" ]; then
  # Create a symlink for gitconfig, so git http proxy can be shown correctly.
  if [ ! -e ~/.gitconfig ]; then
    run ln -s "$DOTFILES_ROOT/gitconfig" ~/.gitconfig
  fi

  source ./scripts/misc/bash_proxyctl
  pe -p "$user_http_proxy" http git curl
  trap pd EXIT
fi

run ./scripts/misc/setup_system_repo_mirror

deps=(
  prerequisites
  rcm
  zsh
  antibody
  hstr
  rlwrap
  asdf
)

for dep in "${deps[@]}"; do
  run "./scripts/install/$dep"

  case "$dep" in
    rcm)
      run rcup

      # Fix bad permissions.
      chmod 600 ~/.ssh/config
      ;;
  esac
done

zsh -c "source ~/.zshrc; $DOTFILES_ROOT/scripts/bootstrap/inc/post-setup"
